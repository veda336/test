import { createSlice, nanoid } from "@reduxjs/toolkit";

const predefinedTableLabels = ["Name", "Email", "Phone", "Address", "Age"];

const formBuilderSlice = createSlice({
  name: "formBuilder",
  initialState: {
    droppedComponents: [], // root-level Canvas rows
    activeComponentId: null,
  },
  reducers: {
    // ---------------- Add Component ----------------
    addComponent: {
      reducer(state, action) {
        const { parentId, columnIndex, component } = action.payload;

        // Root-level: only Canvas allowed
        if (!parentId) {
          if (component.type !== "Canvas") {
            console.warn("Only Canvas can be added at root level");
            return;
          }
          state.droppedComponents.push(component);
          return;
        }

        // Recursive helper to find target parent
        const insertRecursive = (components) => {
          for (let c of components) {
            if (c.id === parentId) {
              if (c.type === "Canvas") {
                const col = c.children.find(col => col.columnIndex === columnIndex);
                if (!col) return true;

                // ---------------- Table Logic ----------------
                if (component.type === "Table") {
                  const existing = col.components[0];
                  if (existing && existing.type === "Table") {
                    // Add 1 more box to existing Table
                    const nextIndex = existing.boxes.length + 1;
                    existing.boxes.push({
                      id: nanoid(),
                      label: `Box ${nextIndex}`,
                      sampleText: `Sample ${nextIndex}`
                    });
                  } else {
                    // First-time Table: use component from prepare() (5 predefined boxes)
                    col.components = [component];
                  }
                  return true;
                }

                // ---------------- Generic Component (Textbox, Dropdown, Accordion, etc.) ----------------
                col.components = [component]; // enforce one component per column
                return true;
              }

              if (c.type === "Accordion") {
                c.children.push(component); // multiple components allowed in Accordion
                return true;
              }
            }

            // Recurse inside Canvas columns
            if (c.type === "Canvas") {
              for (let col of c.children) {
                if (insertRecursive(col.components)) return true;
              }
            }

            if (c.type === "Accordion") {
              if (insertRecursive(c.children)) return true;
            }
          }
          return false;
        };

        insertRecursive(state.droppedComponents);
      },

      // Prepare payload
      prepare(type, parentId = null, columnIndex = 0, extraConfig = {}) {
        let component;
        switch (type) {
          case "Canvas": {
            const columns = extraConfig.columns || 1;
            component = {
              id: nanoid(),
              type: "Canvas",
              config: { columns },
              children: Array.from({ length: columns }, (_, i) => ({
                columnIndex: i,
                components: [],
              })),
            };
            break;
          }
          case "Accordion": {
            component = {
              id: nanoid(),
              type: "Accordion",
              config: { title: "New Section", expanded: true },
              children: [],
            };
            break;
          }
          case "Table": {
            component = {
              id: nanoid(),
              type: "Table",
              config: { title: "New Table" },
              boxes: predefinedTableLabels.map((label, i) => ({
                id: nanoid(),
                label,
                sampleText: `Sample ${i + 1}`,
              })),
            };
            break;
          }
          default: {
            // Generic field like Textbox, Dropdown
            component = {
              id: nanoid(),
              type,
              config: { ...extraConfig },
            };
          }
        }

        return { payload: { parentId, columnIndex, component } };
      },
    },

    // ---------------- Update Component Config ----------------
    updateComponentConfig(state, action) {
      const { id, updates } = action.payload;

      const updateRecursive = (components) => {
        for (let c of components) {
          if (c.id === id) {
            c.config = { ...c.config, ...updates };
            return true;
          }

          if (c.type === "Canvas") {
            for (let col of c.children) {
              if (updateRecursive(col.components)) return true;
            }
          }
          if (c.type === "Accordion") {
            if (updateRecursive(c.children)) return true;
          }
        }
        return false;
      };

      updateRecursive(state.droppedComponents);
    },

    // ---------------- Update Table Boxes ----------------
    updateTableBox(state, action) {
      const { tableId, boxId, updates } = action.payload;

      const updateRecursive = (components) => {
        for (let c of components) {
          if (c.id === tableId && c.type === "Table") {
            if (boxId) {
              const box = c.boxes.find(b => b.id === boxId);
              if (box) Object.assign(box, updates);
            } else if (updates.reorder) {
              c.boxes = updates.reorder;
            }
            return true;
          }

          if (c.type === "Canvas") {
            for (let col of c.children) {
              if (updateRecursive(col.components)) return true;
            }
          }
          if (c.type === "Accordion") {
            if (updateRecursive(c.children)) return true;
          }
        }
        return false;
      };

      updateRecursive(state.droppedComponents);
    },

    // ---------------- Active Component ----------------
    setActiveComponent(state, action) {
      state.activeComponentId = action.payload;
    },
  },
});

export const {
  addComponent,
  updateComponentConfig,
  updateTableBox,
  setActiveComponent,
} = formBuilderSlice.actions;

export default formBuilderSlice.reducer;