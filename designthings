import { createSlice, nanoid } from "@reduxjs/toolkit";

const formBuilderSlice = createSlice({
  name: "formBuilder",
  initialState: {
    droppedComponents: [],  // all root-level Canvas rows
    activeComponentId: null,
  },
  reducers: {
    // ---------------- Add Component ----------------
    addComponent: {
      reducer(state, action) {
        const { parentId, columnIndex, component } = action.payload;

        // If parentId is null, only allow Canvas at root
        if (!parentId) {
          if (component.type !== "Canvas") {
            console.warn("Only Canvas can be added at root level");
            return;
          }
          state.droppedComponents.push(component);
          return;
        }

        // Recursive helper to find the target parent
        const insertRecursive = (components) => {
          for (let c of components) {
            if (c.id === parentId) {
              if (c.type === "Canvas") {
                const col = c.children.find(col => col.columnIndex === columnIndex);
                if (col) {
                  // Enforce one component per column
                  col.components = [component]; // replace existing if any
                }
                return true;
              }
              if (c.type === "Accordion") {
                // Inside Accordion, allow multiple components in children
                c.children.push(component);
                return true;
              }
            }

            // Recursive search
            if (c.type === "Canvas") {
              for (let col of c.children) {
                if (insertRecursive(col.components)) return true;
              }
            }
            if (c.type === "Accordion") {
              if (insertRecursive(c.children)) return true;
            }
          }
          return false;
        };

        insertRecursive(state.droppedComponents);
      },

      // Prepare payload
      prepare(type, parentId = null, columnIndex = 0, extraConfig = {}) {
        let component;
        switch (type) {
          case "Canvas": {
            const columns = extraConfig.columns || 1;
            component = {
              id: nanoid(),
              type: "Canvas",
              config: { columns },
              children: Array.from({ length: columns }, (_, i) => ({
                columnIndex: i,
                components: [],
              })),
            };
            break;
          }
          case "Accordion": {
            component = {
              id: nanoid(),
              type: "Accordion",
              config: { title: "New Section", expanded: true },
              children: [],
            };
            break;
          }
          case "Table": {
            component = {
              id: nanoid(),
              type: "Table",
              config: { title: "New Table" },
              boxes: Array.from({ length: 5 }, (_, i) => ({
                id: nanoid(),
                label: `Box ${i + 1}`,
                sampleText: `Sample ${i + 1}`,
              })),
            };
            break;
          }
          default: {
            // Generic field like Textbox, Dropdown
            component = {
              id: nanoid(),
              type,
              config: { ...extraConfig },
            };
          }
        }

        return { payload: { parentId, columnIndex, component } };
      },
    },

    // ---------------- Update Component Config ----------------
    updateComponentConfig(state, action) {
      const { id, updates } = action.payload;

      const updateRecursive = (components) => {
        for (let c of components) {
          if (c.id === id) {
            c.config = { ...c.config, ...updates };
            return true;
          }

          if (c.type === "Canvas") {
            for (let col of c.children) {
              if (updateRecursive(col.components)) return true;
            }
          }
          if (c.type === "Accordion") {
            if (updateRecursive(c.children)) return true;
          }
        }
        return false;
      };

      updateRecursive(state.droppedComponents);
    },

    // ---------------- Update Table Boxes ----------------
    updateTableBox(state, action) {
      const { tableId, boxId, updates } = action.payload;

      const updateRecursive = (components) => {
        for (let c of components) {
          if (c.id === tableId && c.type === "Table") {
            if (boxId) {
              const box = c.boxes.find(b => b.id === boxId);
              if (box) Object.assign(box, updates);
            } else if (updates.reorder) {
              c.boxes = updates.reorder;
            }
            return true;
          }

          if (c.type === "Canvas") {
            for (let col of c.children) {
              if (updateRecursive(col.components)) return true;
            }
          }
          if (c.type === "Accordion") {
            if (updateRecursive(c.children)) return true;
          }
        }
        return false;
      };

      updateRecursive(state.droppedComponents);
    },

    // ---------------- Active Component ----------------
    setActiveComponent(state, action) {
      state.activeComponentId = action.payload;
    },
  },
});

export const {
  addComponent,
  updateComponentConfig,
  updateTableBox,
  setActiveComponent,
} = formBuilderSlice.actions;

export default formBuilderSlice.reducer;